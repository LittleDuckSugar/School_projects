#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from pyowm import OWM
from datetime import datetime
from TTS import synthese
import linecache


class Weather():

    def __str__(self):
        return str(self.one_call)

    def __init__(self, city, country):
        owm = OWM("2ea3aeff605b2274864c88993c119d4f")
        reg = owm.city_id_registry()
        listOfLocations = reg.locations_for(city, country=country)
        self.city = listOfLocations[0]
        self.mgr = owm.weather_manager()
        self.country = country.lower()
        self.updateData()
        """
        if user == "actu":
            currentWeather()
        if user == "pre":
            isTimeOrDay = input("jour ou heure")

            if isTimeOrDay == "jour":
        #       ByDay(6)
        #       SpecificDay("mardi")
        #   elif isTimeOrDay == "heure":
        #       currentTimeInfo = datetime.now()
        #       print("Il est", currentTimeInfo.hour, ":", currentTimeInfo.minute)
        #       PerHour(5)
        #       SpecificHour(22, 3)
        #       MomentOfDay("matin", 2)
        # Fuseau horaire!!!
        # TODO ajouter le retour vocal pour les erreurs
        """

    # updateData refreshes weather info of the given city
    def updateData(self):
        self.one_call = self.mgr.one_call(
            self.city.lat, lon=self.city.lon, exclude='minutely,alerts', lang=self.country)

    # vocaReturnBuilder builds the string that will be generated by SynthVoca
    def vocaReturnBuilder(self, tabofnumline, time, ifDayFlag=False):
        back = ""
        for elems in tabofnumline:
            back = back + linecache.getline("weather.txt", elems)

        if ifDayFlag == True:
            print((back.replace("\n", " ")).replace(
                "%temp%", str(self.tempDay(time)).replace(".", ",")))
            synthese((back.replace("\n", " ")).replace(
                "%temp%", str(self.tempDay(time)).replace(".", ",")))
        else:
            print((back.replace("\n", " ")).replace(
                "%temp%", str(self.temp()).replace(".", ",")))

    # currentWeather registers the current weather status and sends it to tabofnumline
    def currentWeather(self):
        tabofnumline = []

        if self.one_call.current.weather_code == 800:
            tabofnumline.append(4)
        # emergency ash, tornado,extreme rain, heavy thunderstorm
        if self.one_call.current.weather_code == 504 or self.one_call.current.weather_code == 762 or self.one_call.current.weather_code == 781 or self.one_call.current.weather_code == 512:
            tabofnumline.append(22)

        if self.one_call.current.weather_code >= 801 and self.one_call.current.weather_code <= 802:
            tabofnumline.append(5)

        if self.one_call.current.weather_code >= 803 and self.one_call.current.weather_code <= 804:
            tabofnumline.append(6)
        # mist/fog
        if self.one_call.current.weather_code == 701 or self.one_call.current.weather_code == 721 or self.one_call.current.weather_code == 741:
            tabofnumline.append(13)
        # dust
        if self.one_call.current.weather_code == 731 or self.one_call.current.weather_code == 761:
            tabofnumline.append(20)
        # sand
        if self.one_call.current.weather_code == 751:
            tabofnumline.append(19)
        # snow
        # light
        if self.one_call.current.weather_code == 600 or self.one_call.current.weather_code == 612 or self.one_call.current.weather_code == 615 or self.one_call.current.weather_code == 620:
            tabofnumline.append(14)
        # normal
        if self.one_call.current.weather_code == 601 or self.one_call.current.weather_code == 611 or self.one_call.current.weather_code == 613 or self.one_call.current.weather_code == 616 or self.one_call.current.weather_code == 621:
            tabofnumline.append(15)
        # heavy
        if self.one_call.current.weather_code == 602 or self.one_call.current.weather_code == 622:
            tabofnumline.append(16)
        # freezing rain
        if self.one_call.current.weather_code == 511:
            tabofnumline.append(17)

        # rain
        # light
        if self.one_call.current.weather_code == 500 or self.one_call.current.weather_code == 520:
            tabofnumline.append(7)
        # medium
        if self.one_call.current.weather_code == 501 or self.one_call.current.weather_code == 521:
            tabofnumline.append(8)
        # heavy
        if self.one_call.current.weather_code == 502 or self.one_call.current.weather_code == 503 or self.one_call.current.weather_code == 522 or self.one_call.current.weather_code == 531:
            tabofnumline.append(9)
        # drizzle
        if self.one_call.current.weather_code >= 300 and self.one_call.current.weather_code <= 321:
            tabofnumline.append(7)

        # thunderstorm
        if self.one_call.current.weather_code == 200 or self.one_call.current.weather_code == 201 or self.one_call.current.weather_code == 202 or self.one_call.current.weather_code == 210 or self.one_call.current.weather_code == 211 or self.one_call.current.weather_code == 221 or self.one_call.current.weather_code == 230 or self.one_call.current.weather_code == 231 or self.one_call.current.weather_code == 232 or self.one_call.current.weather_code == 212:
            tabofnumline.append(12)

        # tabofnumline.append(24)
        # self.vocaReturnBuilder(tabofnumline, "")

        back = ""
        for elems in tabofnumline:
            back = back + linecache.getline("weather.txt", elems)

        # print("back")

        return back[:len(back)-1]

    # dailyForecast registers weather status for daily forecasts and sends it to tabofnumline
    def dailyForecast(self, day):
        tabofnumline = []

        if self.one_call.forecast_daily[day].weather_code == 800:
            tabofnumline.append(28)
        # emergency ash, tornado,extreme rain, heavy thunderstorm
        if self.one_call.forecast_daily[day].weather_code == 504 or self.one_call.forecast_daily[day].weather_code == 762 or self.one_call.forecast_daily[day].weather_code == 781 or self.one_call.forecast_daily[day].weather_code == 512:
            tabofnumline.append(46)

        if self.one_call.forecast_daily[day].weather_code >= 801 and self.one_call.forecast_daily[day].weather_code <= 802:
            tabofnumline.append(29)
        if self.one_call.forecast_daily[day].weather_code >= 803 and self.one_call.forecast_daily[day].weather_code <= 804:
            tabofnumline.append(30)
        # mist/fog
        if self.one_call.forecast_daily[day].weather_code == 701 or self.one_call.forecast_daily[day].weather_code == 721 or self.one_call.forecast_daily[day].weather_code == 741:
            tabofnumline.append(37)
        # dust
        if self.one_call.forecast_daily[day].weather_code == 731 or self.one_call.forecast_daily[day].weather_code == 761:
            tabofnumline.append(44)
        # sand
        if self.one_call.forecast_daily[day].weather_code == 751:
            tabofnumline.append(43)
        # snow
        # light
        if self.one_call.forecast_daily[day].weather_code == 600 or self.one_call.forecast_daily[day].weather_code == 612 or self.one_call.forecast_daily[day].weather_code == 615 or self.one_call.forecast_daily[day].weather_code == 620:
            tabofnumline.append(38)
        # normal
        if self.one_call.forecast_daily[day].weather_code == 601 or self.one_call.forecast_daily[day].weather_code == 611 or self.one_call.forecast_daily[day].weather_code == 613 or self.one_call.forecast_daily[day].weather_code == 616 or self.one_call.forecast_daily[day].weather_code == 621:
            tabofnumline.append(39)
        # heavy
        if self.one_call.forecast_daily[day].weather_code == 602 or self.one_call.forecast_daily[day].weather_code == 622:
            tabofnumline.append(40)
        # freezing rain
        if self.one_call.forecast_daily[day].weather_code == 511:
            tabofnumline.append(42)

        # rain
        # light
        if self.one_call.forecast_daily[day].weather_code == 500 or self.one_call.forecast_daily[day].weather_code == 520:
            tabofnumline.append(31)
        # medium
        if self.one_call.forecast_daily[day].weather_code == 501 or self.one_call.forecast_daily[day].weather_code == 521:
            tabofnumline.append(32)
        # heavy
        if self.one_call.forecast_daily[day].weather_code == 502 or self.one_call.forecast_daily[day].weather_code == 503 or self.one_call.forecast_daily[day].weather_code == 522 or self.one_call.forecast_daily[day].weather_code == 531:
            tabofnumline.append(33)
        # drizzle
        if self.one_call.forecast_daily[day].weather_code >= 300 and self.one_call.forecast_daily[day].weather_code <= 321:
            tabofnumline.append(31)

        # thunderstorm
        if self.one_call.forecast_daily[day].weather_code == 200 or self.one_call.forecast_daily[day].weather_code == 201 or self.one_call.forecast_daily[day].weather_code == 202 or self.one_call.forecast_daily[day].weather_code == 210 or self.one_call.forecast_daily[day].weather_code == 211 or self.one_call.forecast_daily[day].weather_code == 221 or self.one_call.forecast_daily[day].weather_code == 230 or self.one_call.forecast_daily[day].weather_code == 231 or self.one_call.forecast_daily[day].weather_code == 232 or self.one_call.forecast_daily[day].weather_code == 212:
            tabofnumline.append(36)

        tabofnumline.append(48)
        self.vocaReturnBuilder(tabofnumline, day, True)

    # hourlyForecast registers weather status for hourly forecasts and sends it to tabofnumline
    def hourlyForecast(self, my_hour):
        tabofnumline = []
        
        if self.one_call.forecast_hourly[my_hour].weather_code == 800:
            tabofnumline.append(28)
        # emergency ash, tornado,extreme rain, heavy thunderstorm
        if self.one_call.forecast_hourly[my_hour].weather_code == 504 or self.one_call.forecast_hourly[my_hour].weather_code == 762 or self.one_call.forecast_hourly[my_hour].weather_code == 781 or self.one_call.forecast_hourly[my_hour].weather_code == 512:
            tabofnumline.append(46)

        if self.one_call.forecast_hourly[my_hour].weather_code >= 801 and self.one_call.forecast_hourly[my_hour].weather_code <= 802:
            tabofnumline.append(29)
        if self.one_call.forecast_hourly[my_hour].weather_code >= 803 and self.one_call.forecast_hourly[my_hour].weather_code <= 804:
            tabofnumline.append(30)
        # mist/fog
        if self.one_call.forecast_hourly[my_hour].weather_code == 701 or self.one_call.forecast_hourly[my_hour].weather_code == 721 or self.one_call.forecast_hourly[my_hour].weather_code == 741:
            tabofnumline.append(37)
        # dust
        if self.one_call.forecast_hourly[my_hour].weather_code == 731 or self.one_call.forecast_hourly[my_hour].weather_code == 761:
            tabofnumline.append(44)
        # sand
        if self.one_call.forecast_hourly[my_hour].weather_code == 751:
            tabofnumline.append(43)
        # snow
        # light
        if self.one_call.forecast_hourly[my_hour].weather_code == 600 or self.one_call.forecast_hourly[my_hour].weather_code == 612 or self.one_call.forecast_hourly[my_hour].weather_code == 615 or self.one_call.forecast_hourly[my_hour].weather_code == 620:
            tabofnumline.append(38)
        # normal
        if self.one_call.forecast_hourly[my_hour].weather_code == 601 or self.one_call.forecast_hourly[my_hour].weather_code == 611 or self.one_call.forecast_hourly[my_hour].weather_code == 613 or self.one_call.forecast_hourly[my_hour].weather_code == 616 or self.one_call.forecast_hourly[my_hour].weather_code == 621:
            tabofnumline.append(39)
        # heavy
        if self.one_call.forecast_hourly[my_hour].weather_code == 602 or self.one_call.forecast_hourly[my_hour].weather_code == 622:
            tabofnumline.append(40)
        # freezing rain
        if self.one_call.forecast_hourly[my_hour].weather_code == 511:
            tabofnumline.append(42)

        # rain
        # light
        if self.one_call.forecast_hourly[my_hour].weather_code == 500 or self.one_call.forecast_hourly[my_hour].weather_code == 520:
            tabofnumline.append(31)
        # medium
        if self.one_call.forecast_hourly[my_hour].weather_code == 501 or self.one_call.forecast_hourly[my_hour].weather_code == 521:
            tabofnumline.append(32)
        # heavy
        if self.one_call.forecast_hourly[my_hour].weather_code == 502 or self.one_call.forecast_hourly[my_hour].weather_code == 503 or self.one_call.forecast_hourly[my_hour].weather_code == 522 or self.one_call.forecast_hourly[my_hour].weather_code == 531:
            tabofnumline.append(33)
        # drizzle
        if self.one_call.forecast_hourly[my_hour].weather_code >= 300 and self.one_call.forecast_hourly[my_hour].weather_code <= 321:
            tabofnumline.append(31)

        # thunderstorm
        if self.one_call.forecast_hourly[my_hour].weather_code == 200 or self.one_call.forecast_hourly[my_hour].weather_code == 201 or self.one_call.forecast_hourly[my_hour].weather_code == 202 or self.one_call.forecast_hourly[my_hour].weather_code == 210 or self.one_call.forecast_hourly[my_hour].weather_code == 211 or self.one_call.forecast_hourly[my_hour].weather_code == 221 or self.one_call.forecast_hourly[my_hour].weather_code == 230 or self.one_call.forecast_hourly[my_hour].weather_code == 231 or self.one_call.forecast_hourly[my_hour].weather_code == 232 or self.one_call.forecast_hourly[my_hour].weather_code == 212:
            tabofnumline.append(36)

        tabofnumline.append(48)
        self.vocaReturnBuilder(tabofnumline, my_hour)

    # PerHour calls hourlyForecast by selecting an hour within the next 48 hours
    def PerHour(self, hour):
        if hour < 48:
            self.hourlyForecast(hour)
        else:
            print("On ne peut pas dépasser 48h de prévision")

    # SpecificHour calls hourlyForecast by selecting a specific hour within the next 48 hours
    def SpecificHour(self, targetedHour, numDay):
        currentHour = datetime.now()

        if numDay <= 2:
            if currentHour.hour+48 >= targetedHour+(24*numDay):
                self.hourlyForecast(
                    ((targetedHour+(24*numDay))-currentHour.hour))
            else:
                print("On ne peut pas dépasser 48h de prévision")
        else:
            print("On ne peut pas dépasser 48h de prévision mais on peut faire sur 7 jours")

    # MomentOfDay calls hourlyForecast for a specific period of the day
    def MomentOfDay(self, MomentOfDay, numDay):
        currentHour = datetime.now()

        if numDay <= 2:
            differentMoments = {
                "matin": 8,
                "midi": 12,
                "soir": 20
            }

            for moment in differentMoments:
                if MomentOfDay == moment:
                    if currentHour.hour+48 >= differentMoments[moment]+(24*numDay):
                        self.hourlyForecast(
                            ((differentMoments[moment]+(24*numDay))-currentHour.hour))
                    else:
                        print("On ne peut pas dépasser 48h de prévision")
        else:
            print(
                "On ne peut pas dépasser 48h de prévision mais on peut faire sur 7 jours")

    # ByDay calls dailyForecast to get weather status for a day within a week comming after the current one
    def ByDay(self, numDay):
        if numDay <= 7:
            self.dailyForecast(numDay - 1)

    # SpecificDay calls dailyForecast to get weather status for a specific day within a week comming after the current one
    def specificDay(self, wantedDay):
        weekDayNumber = datetime.today().weekday()
        week = {
            "lundi": 0,
            "mardi": 1,
            "mercredi": 2,
            "jeudi": 3,
            "vendredi": 4,
            "samedi": 5,
            "dimanche": 6
        }
        dist = week[wantedDay.lower()] - weekDayNumber

        if dist <= 0:
            dist = dist + 7

        self.dailyForecast(dist - 1)

    # temp returns the current temperature
    def temp(self):
        return (self.one_call.current.temperature()["temp"])

    # tempDay returns the day temperature
    def tempDay(self, time):
        return(self.one_call.forecast_daily[int(time)].temperature('celsius')["day"])
